"""
CS2 Trading Bot - –ü–æ–ª–Ω—ã–π –±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å–∫–∏–Ω–∞–º–∏
–í–µ—Ä—Å–∏—è: 1.0 (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)

–£—Å—Ç–∞–Ω–æ–≤–∫–∞:
pip install python-telegram-bot==20.7 aiohttp beautifulsoup4 python-dotenv

–ó–∞–ø—É—Å–∫:
python cs2_trading_bot.py
"""

import logging
import asyncio
from datetime import datetime, timedelta, time
from typing import Dict, List, Optional
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)
import os

# –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å dotenv
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ============================================================================

TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'YOUR_TELEGRAM_BOT_TOKEN')
STEAM_API_KEY = os.getenv('STEAM_API_KEY', 'YOUR_STEAM_API_KEY')

POPULAR_ITEMS = [
    "AK-47 | Redline (Field-Tested)",
    "AWP | Asiimov (Field-Tested)",
    "M4A4 | Howl (Factory New)",
    "Desert Eagle | Blaze (Factory New)",
    "USP-S | Orion (Factory New)",
    "Glock-18 | Fade (Factory New)",
    "Karambit | Doppler (Factory New)",
    "Butterfly Knife | Fade (Factory New)"
]

PRICE_CHECK_INTERVAL = 1800
NEWS_CHECK_INTERVAL = 3600

# ============================================================================
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# ============================================================================

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ============================================================================
# –•–†–ê–ù–ò–õ–ò–©–ï –î–ê–ù–ù–´–•
# ============================================================================

user_data: Dict = {}
news_cache: List = []

# ============================================================================
# STEAM MARKET API
# ============================================================================

class SteamMarketAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Steam Market"""
    
    BASE_URL = "https://steamcommunity.com/market"
    CSGO_APP_ID = 730
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.session: Optional[aiohttp.ClientSession] = None
    
    async def init_session(self):
        if not self.session or self.session.closed:
            timeout = aiohttp.ClientTimeout(total=30)
            self.session = aiohttp.ClientSession(timeout=timeout)
    
    async def close_session(self):
        if self.session and not self.session.closed:
            await self.session.close()
            await asyncio.sleep(0.25)
    
    async def get_item_price(self, item_name: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –ø—Ä–µ–¥–º–µ—Ç–∞"""
        await self.init_session()
        url = f"{self.BASE_URL}/priceoverview/"
        params = {
            'appid': self.CSGO_APP_ID,
            'currency': 1,
            'market_hash_name': item_name
        }
        
        try:
            async with self.session.get(url, params=params) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    if data.get('success'):
                        return {
                            'lowest_price': data.get('lowest_price', 'N/A'),
                            'median_price': data.get('median_price', 'N/A'),
                            'volume': data.get('volume', 'N/A')
                        }
        except Exception as e:
            logger.error(f"Error fetching price for {item_name}: {e}")
        return None

# ============================================================================
# –ê–ù–ê–õ–ò–¢–ò–ö–ê –¶–ï–ù
# ============================================================================

class PriceAnalyzer:
    """–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤"""
    
    def __init__(self):
        self.price_history: Dict[str, List[Dict]] = {}
    
    def add_price_point(self, item_name: str, price: float):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É —Ü–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        if item_name not in self.price_history:
            self.price_history[item_name] = []
        
        self.price_history[item_name].append({
            'price': price,
            'timestamp': datetime.now()
        })
        
        cutoff = datetime.now() - timedelta(days=30)
        self.price_history[item_name] = [
            p for p in self.price_history[item_name]
            if p['timestamp'] > cutoff
        ]
    
    def detect_trend(self, item_name: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥ —Ü–µ–Ω—ã"""
        if item_name not in self.price_history or len(self.price_history[item_name]) < 3:
            return "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
        
        recent = self.price_history[item_name][-7:]
        prices = [p['price'] for p in recent]
        
        if len(prices) < 2:
            return "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
        
        try:
            if all(prices[i] < prices[i+1] for i in range(len(prices)-1)):
                return "üìà –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç"
            elif all(prices[i] > prices[i+1] for i in range(len(prices)-1)):
                return "üìâ –ü–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã"
            elif prices[-1] > prices[0] * 1.1:
                return "üíπ –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç (+10%+)"
            elif prices[-1] < prices[0] * 0.9:
                return "‚ö†Ô∏è –°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ (-10%+)"
            else:
                return "‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ü–µ–Ω–∞"
        except (IndexError, ZeroDivisionError):
            return "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
    
    def calculate_profit_potential(self, item_name: str) -> int:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–∏–±—ã–ª–∏ (0-100)"""
        if item_name not in self.price_history or len(self.price_history[item_name]) < 5:
            return 50
        
        recent = self.price_history[item_name][-14:]
        prices = [p['price'] for p in recent]
        
        try:
            min_price = min(prices)
            max_price = max(prices)
            
            if min_price == 0:
                return 50
            
            volatility = ((max_price - min_price) / min_price) * 100
            trend = ((prices[-1] - prices[0]) / prices[0]) * 100
            
            potential = 50 + (trend * 2) + (volatility * 0.5)
            return max(0, min(100, int(potential)))
        except (ZeroDivisionError, ValueError):
            return 50
    
    def predict_price(self, item_name: str, days: int = 7) -> Dict:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã"""
        if item_name not in self.price_history or len(self.price_history[item_name]) < 10:
            return {
                'prediction': 'neutral',
                'confidence': 0,
                'message': '‚ùì –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'
            }
        
        data = self.price_history[item_name][-30:]
        prices = [d['price'] for d in data]
        
        try:
            n = len(prices)
            x_mean = n / 2
            y_mean = sum(prices) / n
            
            numerator = sum((i - x_mean) * (prices[i] - y_mean) for i in range(n))
            denominator = sum((i - x_mean) ** 2 for i in range(n))
            
            if denominator == 0:
                slope = 0
            else:
                slope = numerator / denominator
            
            predicted_change = slope * days
            current_price = prices[-1]
            
            if current_price == 0:
                return {
                    'prediction': 'neutral',
                    'confidence': 0,
                    'message': '‚ùì –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö'
                }
            
            change_percent = (predicted_change / current_price) * 100
            
            if change_percent > 5:
                return {
                    'prediction': 'bullish',
                    'confidence': min(85, int(60 + abs(change_percent))),
                    'message': f'üìà –ü—Ä–æ–≥–Ω–æ–∑: —Ä–æ—Å—Ç ~{change_percent:.1f}% –∑–∞ {days}–¥'
                }
            elif change_percent < -5:
                return {
                    'prediction': 'bearish',
                    'confidence': min(85, int(60 + abs(change_percent))),
                    'message': f'üìâ –ü—Ä–æ–≥–Ω–æ–∑: –ø–∞–¥–µ–Ω–∏–µ ~{abs(change_percent):.1f}% –∑–∞ {days}–¥'
                }
            else:
                return {
                    'prediction': 'neutral',
                    'confidence': 70,
                    'message': f'‚û°Ô∏è –ü—Ä–æ–≥–Ω–æ–∑: —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞ {days}–¥'
                }
        except (ZeroDivisionError, ValueError, IndexError):
            return {
                'prediction': 'neutral',
                'confidence': 0,
                'message': '‚ùì –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞'
            }

# ============================================================================
# –ü–ê–†–°–ï–† –ù–û–í–û–°–¢–ï–ô
# ============================================================================

class NewsParser:
    """–ü–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π CS2"""
    
    def __init__(self):
        self.session: Optional[aiohttp.ClientSession] = None
    
    async def init_session(self):
        if not self.session or self.session.closed:
            timeout = aiohttp.ClientTimeout(total=30)
            self.session = aiohttp.ClientSession(timeout=timeout)
    
    async def close_session(self):
        if self.session and not self.session.closed:
            await self.session.close()
            await asyncio.sleep(0.25)
    
    async def get_steam_news(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ Steam"""
        await self.init_session()
        
        url = "https://api.steampowered.com/ISteamNews/GetNewsForApp/v2/"
        params = {
            'appid': 730,
            'count': 5,
            'maxlength': 300
        }
        
        try:
            async with self.session.get(url, params=params) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    news_items = []
                    
                    for item in data.get('appnews', {}).get('newsitems', [])[:5]:
                        news_items.append({
                            'source': 'üéÆ Steam',
                            'title': item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            'date': datetime.fromtimestamp(item.get('date', 0)).strftime('%d.%m.%Y'),
                            'impact': self.analyze_impact(item.get('title', '')),
                            'url': item.get('url', '')
                        })
                    
                    return news_items
        except Exception as e:
            logger.error(f"Error fetching Steam news: {e}")
        
        return []
    
    def analyze_impact(self, title: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
        title_lower = title.lower()
        
        high_keywords = ['case', '–∫–µ–π—Å', 'operation', '–æ–ø–µ—Ä–∞—Ü–∏—è', 'update', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ']
        medium_keywords = ['patch', '–ø–∞—Ç—á', 'balance', '–±–∞–ª–∞–Ω—Å', 'fix', '–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']
        
        if any(k in title_lower for k in high_keywords):
            return 'üî• –í—ã—Å–æ–∫–æ–µ'
        elif any(k in title_lower for k in medium_keywords):
            return '‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ–µ'
        else:
            return '‚ÑπÔ∏è –ù–∏–∑–∫–æ–µ'

# ============================================================================
# –°–û–í–ï–¢–ß–ò–ö –ü–û –ò–ù–í–ï–°–¢–ò–¶–ò–Ø–ú
# ============================================================================

class InvestmentAdvisor:
    """–£–º–Ω—ã–π —Å–æ–≤–µ—Ç—á–∏–∫"""
    
    @staticmethod
    def analyze_item(price_data: Dict, trend: str, potential: int, mode: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
        analysis = {
            'rating': 0,
            'recommendation': '',
            'strategy': '',
            'pros': [],
            'cons': []
        }
        
        rating = 50
        
        if '—Ä–æ—Å—Ç' in trend.lower():
            rating += 15
            analysis['pros'].append('üìà –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥')
        
        try:
            volume_str = str(price_data.get('volume', '0')).replace(',', '')
            volume = int(volume_str)
            if volume > 100:
                rating += 10
                analysis['pros'].append('üí∞ –í—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å')
        except (ValueError, AttributeError):
            pass
        
        if potential > 70:
            rating += 10
            analysis['pros'].append('‚ö° –í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª')
        
        if '–ø–∞–¥–µ–Ω–∏–µ' in trend.lower():
            rating -= 15
            analysis['cons'].append('üìâ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥')
        
        analysis['rating'] = max(0, min(100, rating))
        
        if mode == 'investor':
            if analysis['rating'] > 70:
                analysis['recommendation'] = 'üü¢ –ü–û–ö–£–ü–ê–¢–¨'
                analysis['strategy'] = '–î–µ—Ä–∂–∞—Ç—å 3-6 –º–µ—Å—è—Ü–µ–≤, –ø—Ä–æ–¥–∞—Ç—å –ø—Ä–∏ +20-30%'
            elif analysis['rating'] > 50:
                analysis['recommendation'] = 'üü° –ù–ê–ë–õ–Æ–î–ê–¢–¨'
                analysis['strategy'] = '–î–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞'
            else:
                analysis['recommendation'] = 'üî¥ –ù–ï –ü–û–ö–£–ü–ê–¢–¨'
                analysis['strategy'] = '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫, –∏—Å–∫–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã'
        else:
            if analysis['rating'] > 60:
                analysis['recommendation'] = 'üü¢ –ü–û–ö–£–ü–ê–¢–¨'
                analysis['strategy'] = '–î–µ—Ä–∂–∞—Ç—å 1-2 –Ω–µ–¥–µ–ª–∏, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ +10-15%'
            elif analysis['rating'] > 45:
                analysis['recommendation'] = 'üü° –í–û–ó–ú–û–ñ–ù–ê –ü–û–ö–£–ü–ö–ê'
                analysis['strategy'] = '–°—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ -5%'
            else:
                analysis['recommendation'] = 'üî¥ –ü–†–û–ü–£–°–¢–ò–¢–¨'
                analysis['strategy'] = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏'
        
        return analysis

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# ============================================================================

steam_api = SteamMarketAPI(STEAM_API_KEY)
analyzer = PriceAnalyzer()
news_parser = NewsParser()

# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ============================================================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.effective_user.id
    
    if user_id not in user_data:
        user_data[user_id] = {
            'mode': 'investor',
            'portfolio': [],
            'notifications': True,
            'alerts': []
        }
    
    keyboard = [
        [InlineKeyboardButton("üíé –†–µ–∂–∏–º –ò–Ω–≤–µ—Å—Ç–æ—Ä–∞", callback_data='mode_investor')],
        [InlineKeyboardButton("‚ö° –†–µ–∂–∏–º –¢—Ä–µ–π–¥–µ—Ä–∞", callback_data='mode_trader')],
        [InlineKeyboardButton("üì∞ –¢–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–∏", callback_data='mode_news')],
        [InlineKeyboardButton("üíº –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data='portfolio')],
        [InlineKeyboardButton("üìä –¢–æ–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤", callback_data='top_items')],
        [InlineKeyboardButton("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data='news')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = """
üéÆ <b>CS2 Trading Bot</b> - –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ —Å–∫–∏–Ω–∞–º–∏!

<b>üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
üíπ –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –∏ —Ç—Ä–µ–Ω–¥–æ–≤
üìà –ü—Ä–æ–≥–Ω–æ–∑—ã –¥–≤–∏–∂–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
üîî –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
üì∞ –ù–æ–≤–æ—Å—Ç–∏ CS2

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:</b>
"""
    
    await update.message.reply_text(
        welcome_text,
        parse_mode='HTML',
        reply_markup=reply_markup
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    data = query.data
    
    try:
        if data.startswith('mode_'):
            await handle_mode_change(query, user_id, data)
        elif data == 'portfolio':
            await show_portfolio(query, user_id)
        elif data == 'top_items':
            await show_top_items(query, user_id)
        elif data == 'news':
            await show_news(query)
        elif data.startswith('item_'):
            item_idx = int(data.split('_')[1])
            await show_item_details(query, user_id, item_idx)
        elif data.startswith('add_'):
            item_idx = int(data.split('_')[1])
            await add_to_portfolio(query, user_id, item_idx)
        elif data.startswith('analyze_'):
            item_idx = int(data.split('_')[1])
            await show_analysis(query, user_id, item_idx)
        elif data == 'back':
            keyboard = [
                [InlineKeyboardButton("üìä –¢–æ–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤", callback_data='top_items')],
                [InlineKeyboardButton("üíº –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data='portfolio')],
                [InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data='news')],
            ]
            await query.edit_message_text(
                "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    except Exception as e:
        logger.error(f"Error in callback: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

async def handle_mode_change(query, user_id: int, data: str):
    """–°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞"""
    mode = data.replace('mode_', '')
    user_data[user_id]['mode'] = mode
    
    modes = {
        'investor': ('üíé –ò–Ω–≤–µ—Å—Ç–æ—Ä', '–§–æ–∫—É—Å –Ω–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö\n–†–∏—Å–∫: –Ω–∏–∑–∫–∏–π-—Å—Ä–µ–¥–Ω–∏–π\n–°—Ä–æ–∫: 3-6 –º–µ—Å—è—Ü–µ–≤'),
        'trader': ('‚ö° –¢—Ä–µ–π–¥–µ—Ä', '–ë—ã—Å—Ç—Ä—ã–µ —Å–¥–µ–ª–∫–∏ –∏ –ø—Ä–∏–±—ã–ª—å\n–†–∏—Å–∫: —Å—Ä–µ–¥–Ω–∏–π-–≤—ã—Å–æ–∫–∏–π\n–°—Ä–æ–∫: 1-4 –Ω–µ–¥–µ–ª–∏'),
        'news': ('üì∞ –ù–æ–≤–æ—Å—Ç–∏', '–¢–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n–ú–∏–Ω–∏–º—É–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
    }
    
    name, desc = modes.get(mode, ('üíé –ò–Ω–≤–µ—Å—Ç–æ—Ä', '–†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'))
    keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back')]]
    
    await query.edit_message_text(
        f"‚úÖ <b>–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω: {name}</b>\n\n{desc}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_portfolio(query, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å"""
    portfolio = user_data[user_id].get('portfolio', [])
    
    if not portfolio:
        text = "üíº <b>–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç</b>\n\n–î–æ–±–∞–≤—å—Ç–µ —Å–∫–∏–Ω—ã —á–µ—Ä–µ–∑ '–¢–æ–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤' üëá"
        keyboard = [
            [InlineKeyboardButton("üìä –¢–æ–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤", callback_data='top_items')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
        ]
        await query.edit_message_text(text, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))
        return
    
    text = "üíº <b>–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:</b>\n\n"
    total = 0.0
    
    for idx in portfolio:
        if idx >= len(POPULAR_ITEMS):
            continue
            
        item = POPULAR_ITEMS[idx]
        price_data = await steam_api.get_item_price(item)
        
        if price_data:
            price_str = price_data.get('median_price', '$0')
            trend = analyzer.detect_trend(item)
            
            text += f"<b>{item}</b>\nüí∞ {price_str} | {trend}\n\n"
            
            try:
                price_val = float(price_str.replace(',', ''))
                total += price_val
            except (ValueError, AttributeError):
                pass
    
    text += f"\n<b>üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total:.2f}</b>"
    
    keyboard = [
        [InlineKeyboardButton("üìä –¢–æ–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤", callback_data='top_items')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    
    await query.edit_message_text(text, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))

async def show_top_items(query, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    text = "üìä <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã CS2:</b>\n\n"
    
    keyboard = []
    for i, item in enumerate(POPULAR_ITEMS[:8]):
        price_data = await steam_api.get_item_price(item)
        
        if price_data:
            price = price_data.get('median_price', 'N/A')
            potential = analyzer.calculate_profit_potential(item)
            
            try:
                price_val = float(price.replace('$', '').replace(',', ''))
                analyzer.add_price_point(item, price_val)
            except (ValueError, AttributeError):
                pass
            
            emoji = 'üü¢' if potential > 70 else 'üü°' if potential > 50 else 'üü†'
            text += f"{i+1}. <b>{item}</b>\n   üí∞ {price} | {emoji} –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: {potential}/100\n\n"
            
            short_name = item.split('|')[0].strip()[:20]
            keyboard.append([InlineKeyboardButton(f"{i+1}. {short_name}", callback_data=f"item_{i}")])
        
        await asyncio.sleep(0.5)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')])
    
    await query.edit_message_text(text, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))

async def show_item_details(query, user_id: int, item_idx: int):
    """–î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    if item_idx >= len(POPULAR_ITEMS):
        await query.answer("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    item = POPULAR_ITEMS[item_idx]
    price_data = await steam_api.get_item_price(item)
    
    if not price_data:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return
    
    trend = analyzer.detect_trend(item)
    potential = analyzer.calculate_profit_potential(item)
    prediction = analyzer.predict_price(item, 7)
    
    text = f"üì¶ <b>{item}</b>\n\n"
    text += f"üí∞ <b>–¶–µ–Ω—ã:</b>\n"
    text += f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {price_data.get('lowest_price', 'N/A')}\n"
    text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è: {price_data.get('median_price', 'N/A')}\n\n"
    text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    text += f"‚Ä¢ –û–±—ä–µ–º: {price_data.get('volume', 'N/A')}\n"
    text += f"‚Ä¢ –¢—Ä–µ–Ω–¥: {trend}\n"
    text += f"‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: {potential}/100\n\n"
    text += f"üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑ (7 –¥–Ω–µ–π):</b>\n{prediction['message']}\n"
    text += f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction['confidence']}%\n\n"
    
    if potential > 70:
        text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> üü¢ –û—Ç–ª–∏—á–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è!"
    elif potential > 50:
        text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> üü° –°—Ä–µ–¥–Ω–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
    else:
        text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> üî¥ –†–∏—Å–∫–æ–≤–∞–Ω–Ω–æ"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –í –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data=f"add_{item_idx}"),
         InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏–∑", callback_data=f"analyze_{item_idx}")],
        [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data='top_items')]
    ]
    
    await query.edit_message_text(text, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))

async def add_to_portfolio(query, user_id: int, item_idx: int):
    """–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å"""
    if item_idx not in user_data[user_id]['portfolio']:
        user_data[user_id]['portfolio'].append(item_idx)
        await query.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å!")
    else:
        await query.answer("‚ÑπÔ∏è –£–∂–µ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ")

async def show_analysis(query, user_id: int, item_idx: int):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    if item_idx >= len(POPULAR_ITEMS):
        return
    
    item = POPULAR_ITEMS[item_idx]
    price_data = await steam_api.get_item_price(item)
    
    if not price_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        return
    
    trend = analyzer.detect_trend(item)
    potential = analyzer.calculate_profit_potential(item)
    mode = user_data[user_id]['mode']
    
    analysis = InvestmentAdvisor.analyze_item(price_data, trend, potential, mode)
    
    text = f"üîç <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:</b>\n<b>{item}</b>\n\n"
    text += f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {analysis['rating']}/100\n\n"
    text += f"üìå <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> {analysis['recommendation']}\n"
    text += f"üí° <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {analysis['strategy']}\n\n"
    
    if analysis['pros']:
        text += "<b>‚úÖ –ü–ª—é—Å—ã:</b>\n"
        for pro in analysis['pros']:
            text += f"  ‚Ä¢ {pro}\n"
        text += "\n"
    
    if analysis['cons']:
        text += "<b>‚ùå –ú–∏–Ω—É—Å—ã:</b>\n"
        for con in analysis['cons']:
            text += f"  ‚Ä¢ {con}\n"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –í –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data=f"add_{item_idx}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"item_{item_idx}")]
    ]
    
    await query.edit_message_text(text, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))

async def show_news(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"""
    global news_cache
    
    news_needs_update = not news_cache
    if news_cache:
        first_item = news_cache[0]
        if 'fetched' in first_item:
            age = (datetime.now() - first_item['fetched']).total_seconds()
            if age > 3600:
                news_needs_update = True
    
    if news_needs_update:
        news_items = await news_parser.get_steam_news()
        for item in news_items:
            item['fetched'] = datetime.now()
        news_cache = news_items
    else:
        news_items = news_cache
    
    if not news_items:
        text = "üì∞ <b>–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</b>"
    else:
        text = "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ CS2:</b>\n\n"
        for i, item in enumerate(news_items[:5], 1):
            text += f"{i}. <b>{item['title']}</b>\n"
            text += f"   üìÖ {item['date']} | {item['source']}\n"
            text += f"   –í–ª–∏—è–Ω–∏–µ: {item['impact']}\n\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
    await query.edit_message_text(text, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /menu"""
    keyboard = [
        [InlineKeyboardButton("üìä –¢–æ–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤", callback_data='top_items')],
        [InlineKeyboardButton("üíº –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data='portfolio')],
        [InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data='news')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML',
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
<b>üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/portfolio - –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
/top - –¢–æ–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤
/news - –ù–æ–≤–æ—Å—Ç–∏
/help - –°–ø—Ä–∞–≤–∫–∞

<b>üéØ –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:</b>

<b>üíé –ò–Ω–≤–µ—Å—Ç–æ—Ä</b>
‚Ä¢ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è (3-6 –º–µ—Å)
‚Ä¢ –ù–∏–∑–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫

<b>‚ö° –¢—Ä–µ–π–¥–µ—Ä</b>
‚Ä¢ –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è (1-4 –Ω–µ–¥–µ–ª–∏)
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π/–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫

<b>üì∞ –ù–æ–≤–æ—Å—Ç–∏</b>
‚Ä¢ –¢–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

<b>‚ö†Ô∏è –î–∏—Å–∫–ª–µ–π–º–µ—Ä:</b>
–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Å–æ–≤–µ—Ç–Ω–∏–∫–æ–º. –í—Å–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤–∞—à —Ä–∏—Å–∫.
"""
    
    await update.message.reply_text(help_text, parse_mode='HTML')

async def portfolio_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /portfolio"""
    user_id = update.effective_user.id
    
    if user_id not in user_data:
        user_data[user_id] = {
            'mode': 'investor',
            'portfolio': [],
            'notifications': True,
            'alerts': []
        }
    
    portfolio = user_data[user_id].get('portfolio', [])
    
    if not portfolio:
        text = "üíº <b>–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /top –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
        await update.message.reply_text(text, parse_mode='HTML')
        return
    
    text = "üíº <b>–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:</b>\n\n"
    total = 0.0
    
    for idx in portfolio:
        if idx >= len(POPULAR_ITEMS):
            continue
            
        item = POPULAR_ITEMS[idx]
        price_data = await steam_api.get_item_price(item)
        
        if price_data:
            price_str = price_data.get('median_price', '$0')
            trend = analyzer.detect_trend(item)
            
            text += f"<b>{item}</b>\nüí∞ {price_str} | {trend}\n\n"
            
            try:
                price_val = float(price_str.replace('$', '').replace(',', ''))
                total += price_val
            except (ValueError, AttributeError):
                pass
    
    text += f"\n<b>üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total:.2f}</b>"
    await update.message.reply_text(text, parse_mode='HTML')

async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /top"""
    text = "üìä <b>–¢–æ–ø-5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤:</b>\n\n"
    
    for i, item in enumerate(POPULAR_ITEMS[:5], 1):
        price_data = await steam_api.get_item_price(item)
        
        if price_data:
            price = price_data.get('median_price', 'N/A')
            potential = analyzer.calculate_profit_potential(item)
            
            emoji = 'üü¢' if potential > 70 else 'üü°' if potential > 50 else 'üü†'
            text += f"{i}. <b>{item}</b>\n   üí∞ {price} | {emoji} {potential}/100\n\n"
        
        await asyncio.sleep(0.5)
    
    text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
    await update.message.reply_text(text, parse_mode='HTML')

async def news_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /news"""
    global news_cache
    
    news_needs_update = not news_cache
    if news_cache:
        first_item = news_cache[0]
        if 'fetched' in first_item:
            age = (datetime.now() - first_item['fetched']).total_seconds()
            if age > 3600:
                news_needs_update = True
    
    if news_needs_update:
        news_items = await news_parser.get_steam_news()
        for item in news_items:
            item['fetched'] = datetime.now()
        news_cache = news_items
    else:
        news_items = news_cache
    
    if not news_items:
        text = "üì∞ <b>–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</b>"
    else:
        text = "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ CS2:</b>\n\n"
        for i, item in enumerate(news_items[:5], 1):
            text += f"{i}. <b>{item['title']}</b>\n"
            text += f"   üìÖ {item['date']} | {item['source']}\n"
            text += f"   –í–ª–∏—è–Ω–∏–µ: {item['impact']}\n\n"
    
    await update.message.reply_text(text, parse_mode='HTML')

# ============================================================================
# –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò
# ============================================================================

async def monitor_prices(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω"""
    logger.info("Starting price monitoring...")
    
    for item in POPULAR_ITEMS[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
        try:
            price_data = await steam_api.get_item_price(item)
            
            if price_data and price_data.get('median_price'):
                try:
                    price_str = str(price_data['median_price']).replace('$', '').replace(',', '')
                    price = float(price_str)
                    analyzer.add_price_point(item, price)
                    
                    trend = analyzer.detect_trend(item)
                    potential = analyzer.calculate_profit_potential(item)
                    
                    if "–°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç" in trend or potential > 75:
                        for user_id, data in list(user_data.items()):
                            if data.get('notifications') and data.get('mode') != 'news':
                                try:
                                    message = f"üîî <b>–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª!</b>\n\n"
                                    message += f"üì¶ <b>{item}</b>\n"
                                    message += f"üí∞ –¶–µ–Ω–∞: {price_data['median_price']}\n"
                                    message += f"üìä {trend}\n"
                                    message += f"‚≠ê –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: {potential}/100\n\n"
                                    message += f"üí° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫—É!"
                                    
                                    await context.bot.send_message(
                                        chat_id=user_id,
                                        text=message,
                                        parse_mode='HTML'
                                    )
                                except Exception as e:
                                    logger.error(f"Error sending signal to {user_id}: {e}")
                
                except (ValueError, AttributeError) as e:
                    logger.error(f"Error parsing price for {item}: {e}")
            
            await asyncio.sleep(2)
            
        except Exception as e:
            logger.error(f"Error monitoring {item}: {e}")
    
    logger.info("Price monitoring completed")

async def check_news(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    global news_cache
    
    logger.info("Checking for news...")
    
    try:
        news_items = await news_parser.get_steam_news()
        
        if not news_items:
            return
        
        new_news = []
        if news_cache:
            cached_titles = {item.get('title') for item in news_cache if 'title' in item}
            new_news = [item for item in news_items if item.get('title') not in cached_titles]
        else:
            new_news = news_items[:1]
        
        for item in news_items:
            item['fetched'] = datetime.now()
        news_cache = news_items
        
        for news_item in new_news:
            if news_item.get('impact') in ['üî• –í—ã—Å–æ–∫–æ–µ', '‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ–µ']:
                for user_id, data in list(user_data.items()):
                    if data.get('notifications'):
                        try:
                            message = f"üì∞ <b>–í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å CS2!</b>\n\n"
                            message += f"<b>{news_item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n\n"
                            message += f"üìÖ {news_item.get('date', 'N/A')}\n"
                            message += f"–í–ª–∏—è–Ω–∏–µ: {news_item.get('impact', 'N/A')}"
                            
                            await context.bot.send_message(
                                chat_id=user_id,
                                text=message,
                                parse_mode='HTML'
                            )
                        except Exception as e:
                            logger.error(f"Error sending news to {user_id}: {e}")
        
        logger.info(f"Found {len(new_news)} new news items")
        
    except Exception as e:
        logger.error(f"Error checking news: {e}")

async def send_daily_report(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
    logger.info("Sending daily reports...")
    
    for user_id, data in list(user_data.items()):
        if not data.get('notifications') or data.get('mode') == 'news':
            continue
        
        try:
            portfolio = data.get('portfolio', [])
            
            if not portfolio:
                continue
            
            text = "üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n\n"
            total_value = 0.0
            growing = 0
            falling = 0
            
            for idx in portfolio:
                if idx >= len(POPULAR_ITEMS):
                    continue
                
                item = POPULAR_ITEMS[idx]
                price_data = await steam_api.get_item_price(item)
                
                if price_data:
                    trend = analyzer.detect_trend(item)
                    
                    if '—Ä–æ—Å—Ç' in trend.lower():
                        growing += 1
                    elif '–ø–∞–¥–µ–Ω–∏–µ' in trend.lower():
                        falling += 1
                    
                    try:
                        price_str = str(price_data.get('median_price', '$0')).replace(', '').replace(',', '')
                        total_value += float(price_str)
                    except (ValueError, AttributeError):
                        pass
                
                await asyncio.sleep(0.5)
            
            text += f"üíº <b>–ü–æ—Ä—Ç—Ñ–µ–ª—å:</b> {len(portfolio)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"
            text += f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${total_value:.2f}\n\n"
            text += f"üìà –†–∞—Å—Ç—É—Ç: {growing}\n"
            text += f"üìâ –ü–∞–¥–∞—é—Ç: {falling}\n"
            text += f"‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã: {len(portfolio) - growing - falling}\n\n"
            
            if growing > falling:
                text += "‚úÖ –•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å! –ü–æ—Ä—Ç—Ñ–µ–ª—å —Ä–∞—Å—Ç–µ—Ç."
            elif falling > growing:
                text += "‚ö†Ô∏è –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å–Ω–∏–∂–∞–µ—Ç—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏."
            else:
                text += "‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–µ–Ω—å –Ω–∞ —Ä—ã–Ω–∫–µ."
            
            await context.bot.send_message(
                chat_id=user_id,
                text=text,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"Error sending report to {user_id}: {e}")
    
    logger.info("Daily reports sent")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")
    
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
    except Exception as e:
        logger.error(f"Error in error_handler: {e}")

# ============================================================================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ============================================================================

async def post_init(application: Application):
    """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    logger.info("Bot initialized successfully!")
    await steam_api.init_session()
    await news_parser.init_session()

async def post_shutdown(application: Application):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    logger.info("Shutting down...")
    await steam_api.close_session()
    await news_parser.close_session()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    if TELEGRAM_TOKEN == 'YOUR_TELEGRAM_BOT_TOKEN':
        print("=" * 60)
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã!")
        print("=" * 60)
        print("\nüìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:\n")
        print("TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_BotFather")
        print("STEAM_API_KEY=–≤–∞—à_steam_api_–∫–ª—é—á")
        print("\nüìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
        print("1. Telegram Token: https://t.me/BotFather -> /newbot")
        print("2. Steam API Key: https://steamcommunity.com/dev/apikey")
        print("=" * 60)
        return
    
    try:
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("menu", menu))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("portfolio", portfolio_command))
        application.add_handler(CommandHandler("top", top_command))
        application.add_handler(CommandHandler("news", news_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        job_queue = application.job_queue
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        job_queue.run_repeating(monitor_prices, interval=PRICE_CHECK_INTERVAL, first=60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–π —á–∞—Å
        job_queue.run_repeating(check_news, interval=NEWS_CHECK_INTERVAL, first=120)
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 9:00
        job_queue.run_daily(send_daily_report, time=time(hour=9, minute=0))
        
        # –•—É–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        application.post_init = post_init
        application.post_shutdown = post_shutdown
        
        # –ó–∞–ø—É—Å–∫
        print("=" * 60)
        print("üéÆ CS2 Trading Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("=" * 60)
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç")
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: –∫–∞–∂–¥—ã–π —á–∞—Å")
        print("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç: 09:00")
        print("=" * 60)
        print("ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("=" * 60)
        
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")

if __name__ == '__main__':
    main(), '').replace(',', ''))
                total += price_val
            except (ValueError, AttributeError):
                pass
    
    text += f"\n<b>üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total:.2f}</b>"
    
    keyboard = [
        [InlineKeyboardButton("üìä –¢–æ–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤", callback_data='top_items')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    
    await query.edit_message_text(text, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))

async def show_top_items(query, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    text = "üìä <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã CS2:</b>\n\n"
    
    keyboard = []
    for i, item in enumerate(POPULAR_ITEMS[:8]):
        price_data = await steam_api.get_item_price(item)
        
        if price_data:
            price = price_data.get('median_price', 'N/A')
            potential = analyzer.calculate_profit_potential(item)
            
            try:
                price_val = float(price.replace('$', '').replace(',', ''))
                analyzer.add_price_point(item, price_val)
            except (ValueError, AttributeError):
                pass
            
            emoji = 'üü¢' if potential > 70 else 'üü°' if potential > 50 else 'üü†'
            text += f"{i+1}. <b>{item}</b>\n   üí∞ {price} | {emoji} –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: {potential}/100\n\n"
            
            short_name = item.split('|')[0].strip()[:20]
            keyboard.append([InlineKeyboardButton(f"{i+1}. {short_name}", callback_data=f"item_{i}")])
        
        await asyncio.sleep(0.5)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')])
    
    await query.edit_message_text(text, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))

async def show_item_details(query, user_id: int, item_idx: int):
    """–î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    if item_idx >= len(POPULAR_ITEMS):
        await query.answer("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    item = POPULAR_ITEMS[item_idx]
    price_data = await steam_api.get_item_price(item)
    
    if not price_data:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return
    
    trend = analyzer.detect_trend(item)
    potential = analyzer.calculate_profit_potential(item)
    prediction = analyzer.predict_price(item, 7)
    
    text = f"üì¶ <b>{item}</b>\n\n"
    text += f"üí∞ <b>–¶–µ–Ω—ã:</b>\n"
    text += f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {price_data.get('lowest_price', 'N/A')}\n"
    text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è: {price_data.get('median_price', 'N/A')}\n\n"
    text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    text += f"‚Ä¢ –û–±—ä–µ–º: {price_data.get('volume', 'N/A')}\n"
    text += f"‚Ä¢ –¢—Ä–µ–Ω–¥: {trend}\n"
    text += f"‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: {potential}/100\n\n"
    text += f"üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑ (7 –¥–Ω–µ–π):</b>\n{prediction['message']}\n"
    text += f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction['confidence']}%\n\n"
    
    if potential > 70:
        text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> üü¢ –û—Ç–ª–∏—á–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è!"
    elif potential > 50:
        text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> üü° –°—Ä–µ–¥–Ω–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
    else:
        text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> üî¥ –†–∏—Å–∫–æ–≤–∞–Ω–Ω–æ"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –í –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data=f"add_{item_idx}"),
         InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏–∑", callback_data=f"analyze_{item_idx}")],
        [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data='top_items')]
    ]
    
    await query.edit_message_text(text, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))

async def add_to_portfolio(query, user_id: int, item_idx: int):
    """–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å"""
    if item_idx not in user_data[user_id]['portfolio']:
        user_data[user_id]['portfolio'].append(item_idx)
        await query.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å!")
    else:
        await query.answer("‚ÑπÔ∏è –£–∂–µ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ")

async def show_analysis(query, user_id: int, item_idx: int):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    if item_idx >= len(POPULAR_ITEMS):
        return
    
    item = POPULAR_ITEMS[item_idx]
    price_data = await steam_api.get_item_price(item)
    
    if not price_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        return
    
    trend = analyzer.detect_trend(item)
    potential = analyzer.calculate_profit_potential(item)
    mode = user_data[user_id]['mode']
    
    analysis = InvestmentAdvisor.analyze_item(price_data, trend, potential, mode)
    
    text = f"üîç <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:</b>\n<b>{item}</b>\n\n"
    text += f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {analysis['rating']}/100\n\n"
    text += f"üìå <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> {analysis['recommendation']}\n"
    text += f"üí° <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {analysis['strategy']}\n\n"
    
    if analysis['pros']:
        text += "<b>‚úÖ –ü–ª—é—Å—ã:</b>\n"
        for pro in analysis['pros']:
            text += f"  ‚Ä¢ {pro}\n"
        text += "\n"
    
    if analysis['cons']:
        text += "<b>‚ùå –ú–∏–Ω—É—Å—ã:</b>\n"
        for con in analysis['cons']:
            text += f"  ‚Ä¢ {con}\n"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –í –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data=f"add_{item_idx}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"item_{item_idx}")]
    ]
    
    await query.edit_message_text(text, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))

async def show_news(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"""
    global news_cache
    
    news_needs_update = not news_cache
    if news_cache:
        first_item = news_cache[0]
        if 'fetched' in first_item:
            age = (datetime.now() - first_item['fetched']).total_seconds()
            if age > 3600:
                news_needs_update = True
    
    if news_needs_update:
        news_items = await news_parser.get_steam_news()
        for item in news_items:
            item['fetched'] = datetime.now()
        news_cache = news_items
    else:
        news_items = news_cache
    
    if not news_items:
        text = "üì∞ <b>–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</b>"
    else:
        text = "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ CS2:</b>\n\n"
        for i, item in enumerate(news_items[:5], 1):
            text += f"{i}. <b>{item['title']}</b>\n"
            text += f"   üìÖ {item['date']} | {item['source']}\n"
            text += f"   –í–ª–∏—è–Ω–∏–µ: {item['impact']}\n\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
    await query.edit_message_text(text, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /menu"""
    keyboard = [
        [InlineKeyboardButton("üìä –¢–æ–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤", callback_data='top_items')],
        [InlineKeyboardButton("üíº –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data='portfolio')],
        [InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data='news')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML',
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
<b>üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/portfolio - –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
/top - –¢–æ–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤
/news - –ù–æ–≤–æ—Å—Ç–∏
/help - –°–ø—Ä–∞–≤–∫–∞

<b>üéØ –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:</b>

<b>üíé –ò–Ω–≤–µ—Å—Ç–æ—Ä</b>
‚Ä¢ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è (3-6 –º–µ—Å)
‚Ä¢ –ù–∏–∑–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫

<b>‚ö° –¢—Ä–µ–π–¥–µ—Ä</b>
‚Ä¢ –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è (1-4 –Ω–µ–¥–µ–ª–∏)
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π/–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫

<b>üì∞ –ù–æ–≤–æ—Å—Ç–∏</b>
‚Ä¢ –¢–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

<b>‚ö†Ô∏è –î–∏—Å–∫–ª–µ–π–º–µ—Ä:</b>
–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Å–æ–≤–µ—Ç–Ω–∏–∫–æ–º. –í—Å–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤–∞—à —Ä–∏—Å–∫.
"""
    
    await update.message.reply_text(help_text, parse_mode='HTML')

async def portfolio_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /portfolio"""
    user_id = update.effective_user.id
    
    if user_id not in user_data:
        user_data[user_id] = {
            'mode': 'investor',
            'portfolio': [],
            'notifications': True,
            'alerts': []
        }
    
    portfolio = user_data[user_id].get('portfolio', [])
    
    if not portfolio:
        text = "üíº <b>–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /top –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
        await update.message.reply_text(text, parse_mode='HTML')
        return
    
    text = "üíº <b>–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:</b>\n\n"
    total = 0.0
    
    for idx in portfolio:
        if idx >= len(POPULAR_ITEMS):
            continue
            
        item = POPULAR_ITEMS[idx]
        price_data = await steam_api.get_item_price(item)
        
        if price_data:
            price_str = price_data.get('median_price', '$0')
            trend = analyzer.detect_trend(item)
            
            text += f"<b>{item}</b>\nüí∞ {price_str} | {trend}\n\n"
            
            try:
                price_val = float(price_str.replace(', '').replace(',', ''))
                total += price_val
            except (ValueError, AttributeError):
                pass
    
    text += f"\n<b>üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total:.2f}</b>"
    await update.message.reply_text(text, parse_mode='HTML')

async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /top"""
    text = "üìä <b>–¢–æ–ø-5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤:</b>\n\n"
    
    for i, item in enumerate(POPULAR_ITEMS[:5], 1):
        price_data = await steam_api.get_item_price(item)
        
        if price_data:
            price = price_data.get('median_price', 'N/A')
            potential = analyzer.calculate_profit_potential(item)
            
            emoji = 'üü¢' if potential > 70 else 'üü°' if potential > 50 else 'üü†'
            text += f"{i}. <b>{item}</b>\n   üí∞ {price} | {emoji} {potential}/100\n\n"
        
        await asyncio.sleep(0.5)
    
    text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
    await update.message.reply_text(text, parse_mode='HTML')

async def news_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /news"""
    global news_cache
    
    news_needs_update = not news_cache
    if news_cache:
        first_item = news_cache[0]
        if 'fetched' in first_item:
            age = (datetime.now() - first_item['fetched']).total_seconds()
            if age > 3600:
                news_needs_update = True
    
    if news_needs_update:
        news_items = await news_parser.get_steam_news()
        for item in news_items:
            item['fetched'] = datetime.now()
        news_cache = news_items
    else:
        news_items = news_cache
    
    if not news_items:
        text = "üì∞ <b>–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</b>"
    else:
        text = "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ CS2:</b>\n\n"
        for i, item in enumerate(news_items[:5], 1):
            text += f"{i}. <b>{item['title']}</b>\n"
            text += f"   üìÖ {item['date']} | {item['source']}\n"
            text += f"   –í–ª–∏—è–Ω–∏–µ: {item['impact']}\n\n"
    
    await update.message.reply_text(text, parse_mode='HTML')

# ============================================================================
# –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò
# ============================================================================

async def monitor_prices(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω"""
    logger.info("Starting price monitoring...")
    
    for item in POPULAR_ITEMS[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
        try:
            price_data = await steam_api.get_item_price(item)
            
            if price_data and price_data.get('median_price'):
                try:
                    price_str = str(price_data['median_price']).replace(', '').replace(',', '')
                    price = float(price_str)
                    analyzer.add_price_point(item, price)
                    
                    trend = analyzer.detect_trend(item)
                    potential = analyzer.calculate_profit_potential(item)
                    
                    if "–°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç" in trend or potential > 75:
                        for user_id, data in list(user_data.items()):
                            if data.get('notifications') and data.get('mode') != 'news':
                                try:
                                    message = f"üîî <b>–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª!</b>\n\n"
                                    message += f"üì¶ <b>{item}</b>\n"
                                    message += f"üí∞ –¶–µ–Ω–∞: {price_data['median_price']}\n"
                                    message += f"üìä {trend}\n"
                                    message += f"‚≠ê –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: {potential}/100\n\n"
                                    message += f"üí° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫—É!"
                                    
                                    await context.bot.send_message(
                                        chat_id=user_id,
                                        text=message,
                                        parse_mode='HTML'
                                    )
                                except Exception as e:
                                    logger.error(f"Error sending signal to {user_id}: {e}")
                
                except (ValueError, AttributeError) as e:
                    logger.error(f"Error parsing price for {item}: {e}")
            
            await asyncio.sleep(2)
            
        except Exception as e:
            logger.error(f"Error monitoring {item}: {e}")
    
    logger.info("Price monitoring completed")

async def check_news(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    global news_cache
    
    logger.info("Checking for news...")
    
    try:
        news_items = await news_parser.get_steam_news()
        
        if not news_items:
            return
        
        new_news = []
        if news_cache:
            cached_titles = {item.get('title') for item in news_cache if 'title' in item}
            new_news = [item for item in news_items if item.get('title') not in cached_titles]
        else:
            new_news = news_items[:1]
        
        for item in news_items:
            item['fetched'] = datetime.now()
        news_cache = news_items
        
        for news_item in new_news:
            if news_item.get('impact') in ['üî• –í—ã—Å–æ–∫–æ–µ', '‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ–µ']:
                for user_id, data in list(user_data.items()):
                    if data.get('notifications'):
                        try:
                            message = f"üì∞ <b>–í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å CS2!</b>\n\n"
                            message += f"<b>{news_item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n\n"
                            message += f"üìÖ {news_item.get('date', 'N/A')}\n"
                            message += f"–í–ª–∏—è–Ω–∏–µ: {news_item.get('impact', 'N/A')}"
                            
                            await context.bot.send_message(
                                chat_id=user_id,
                                text=message,
                                parse_mode='HTML'
                            )
                        except Exception as e:
                            logger.error(f"Error sending news to {user_id}: {e}")
        
        logger.info(f"Found {len(new_news)} new news items")
        
    except Exception as e:
        logger.error(f"Error checking news: {e}")

async def send_daily_report(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
    logger.info("Sending daily reports...")
    
    for user_id, data in list(user_data.items()):
        if not data.get('notifications') or data.get('mode') == 'news':
            continue
        
        try:
            portfolio = data.get('portfolio', [])
            
            if not portfolio:
                continue
            
            text = "üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n\n"
            total_value = 0.0
            growing = 0
            falling = 0
            
            for idx in portfolio:
                if idx >= len(POPULAR_ITEMS):
                    continue
                
                item = POPULAR_ITEMS[idx]
                price_data = await steam_api.get_item_price(item)
                
                if price_data:
                    trend = analyzer.detect_trend(item)
                    
                    if '—Ä–æ—Å—Ç' in trend.lower():
                        growing += 1
                    elif '–ø–∞–¥–µ–Ω–∏–µ' in trend.lower():
                        falling += 1
                    
                    try:
                        price_str = str(price_data.get('median_price', '$0')).replace(', '').replace(',', '')
                        total_value += float(price_str)
                    except (ValueError, AttributeError):
                        pass
                
                await asyncio.sleep(0.5)
            
            text += f"üíº <b>–ü–æ—Ä—Ç—Ñ–µ–ª—å:</b> {len(portfolio)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"
            text += f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${total_value:.2f}\n\n"
            text += f"üìà –†–∞—Å—Ç—É—Ç: {growing}\n"
            text += f"üìâ –ü–∞–¥–∞—é—Ç: {falling}\n"
            text += f"‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã: {len(portfolio) - growing - falling}\n\n"
            
            if growing > falling:
                text += "‚úÖ –•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å! –ü–æ—Ä—Ç—Ñ–µ–ª—å —Ä–∞—Å—Ç–µ—Ç."
            elif falling > growing:
                text += "‚ö†Ô∏è –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å–Ω–∏–∂–∞–µ—Ç—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏."
            else:
                text += "‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–µ–Ω—å –Ω–∞ —Ä—ã–Ω–∫–µ."
            
            await context.bot.send_message(
                chat_id=user_id,
                text=text,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"Error sending report to {user_id}: {e}")
    
    logger.info("Daily reports sent")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")
    
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
    except Exception as e:
        logger.error(f"Error in error_handler: {e}")

# ============================================================================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ============================================================================

async def post_init(application: Application):
    """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    logger.info("Bot initialized successfully!")
    await steam_api.init_session()
    await news_parser.init_session()

async def post_shutdown(application: Application):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    logger.info("Shutting down...")
    await steam_api.close_session()
    await news_parser.close_session()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    if TELEGRAM_TOKEN == 'YOUR_TELEGRAM_BOT_TOKEN':
        print("=" * 60)
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã!")
        print("=" * 60)
        print("\nüìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:\n")
        print("TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_BotFather")
        print("STEAM_API_KEY=–≤–∞—à_steam_api_–∫–ª—é—á")
        print("\nüìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
        print("1. Telegram Token: https://t.me/BotFather -> /newbot")
        print("2. Steam API Key: https://steamcommunity.com/dev/apikey")
        print("=" * 60)
        return
    
    try:
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("menu", menu))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("portfolio", portfolio_command))
        application.add_handler(CommandHandler("top", top_command))
        application.add_handler(CommandHandler("news", news_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        job_queue = application.job_queue
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        job_queue.run_repeating(monitor_prices, interval=PRICE_CHECK_INTERVAL, first=60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–π —á–∞—Å
        job_queue.run_repeating(check_news, interval=NEWS_CHECK_INTERVAL, first=120)
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 9:00
        job_queue.run_daily(send_daily_report, time=time(hour=9, minute=0))
        
        # –•—É–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        application.post_init = post_init
        application.post_shutdown = post_shutdown
        
        # –ó–∞–ø—É—Å–∫
        print("=" * 60)
        print("üéÆ CS2 Trading Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("=" * 60)
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç")
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: –∫–∞–∂–¥—ã–π —á–∞—Å")
        print("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç: 09:00")
        print("=" * 60)
        print("ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("=" * 60)
        
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")

if __name__ == '__main__':
    main()